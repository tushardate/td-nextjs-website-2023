import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { useCursorStore } from "./GlobalStore";

export default function Cursor() {
	const { cursorType, setCursorType } = useCursorStore();

	const [mousePos, setMousePos] = useState({
		x: -100,
		y: -100,
	});

	const variants = {
		initial: {
			opacity: 0,
		},
		default: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 0.2,
		},
		hover: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		arrowRight: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		arrowLeft: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		arrowBottomRight: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		arrowTopRight: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		phone: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		email: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		play: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		pause: {
			opacity: 1,
			x: mousePos.x,
			y: mousePos.y,
			scale: 1,
		},
		exit: {
			opacity: 0,
		},
	};

	useEffect(() => {
		const handleMouseMove = (e) => {
			setMousePos({
				x: e.clientX,
				y: e.clientY,
			});
		};
		const mouseMove = window.addEventListener("mousemove", handleMouseMove);

		return () => {
			window.removeEventListener("mousemove", mouseMove);
		};
	}, []);

	return (
		<motion.div
			variants={variants}
			animate={cursorType}
			transition={{ duration: 0.035 }}
			className="cursorMainWrapper"
		>
			<div className="cursorWrapper">
				<CursorType type={cursorType} />
			</div>
		</motion.div>
	);
}

function CursorType({ type }) {
	if (type === "arrowRight") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M42 84C65.196 84 84 65.196 84 42C84 18.804 65.196 0 42 0C18.804 0 0 18.804 0 42C0 65.196 18.804 84 42 84ZM67.4647 41.3393L46.9808 20.8554L43.4591 24.3771L57.9659 38.8192L20.455 38.7869L20.455 43.8271L57.9659 43.8594L43.4914 58.3339L47.0131 61.791L67.4647 41.3393Z"
				/>
			</svg>
		);
	} else if (type === "arrowLeft") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 85 85"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M12.6985 12.6985C-3.70353 29.1005 -3.70354 55.6935 12.6985 72.0955C29.1005 88.4975 55.6935 88.4975 72.0955 72.0955C88.4975 55.6935 88.4975 29.1005 72.0955 12.6985C55.6935 -3.70353 29.1005 -3.70354 12.6985 12.6985ZM42.3164 26.851L39.0352 23.6123L19.9443 42.7032L39.0352 61.7942L42.3164 58.5129L28.8079 45.047L63.7937 45.047V40.3595L28.8079 40.3595L42.3164 26.851Z"
				/>
			</svg>
		);
	} else if (type === "arrowBottomRight") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 85 85"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M72.0954 72.0955C88.4974 55.6934 88.4974 29.1005 72.0954 12.6985C55.6935 -3.70354 29.1004 -3.70354 12.6985 12.6985C-3.70352 29.1005 -3.70352 55.6934 12.6985 72.0955C29.1004 88.4975 55.6935 88.4975 72.0954 72.0955ZM31.399 52.9837L31.4292 57.5939H58.4278V30.5953H53.7874L53.8175 49.6691L29.0788 24.9304L25.7643 28.245L50.503 52.9837H31.399Z"
				/>
			</svg>
		);
	} else if (type === "arrowTopRight") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M71.6985 12.3015C55.2965 -4.10047 28.7035 -4.10047 12.3015 12.3016C-4.10049 28.7036 -4.10049 55.2965 12.3015 71.6985C28.7036 88.1005 55.2965 88.1005 71.6985 71.6985C88.1005 55.2965 88.1005 28.7036 71.6985 12.3015ZM52.5867 52.9979L57.197 52.9678L57.197 25.9692L30.1983 25.9692L30.1983 30.6096L49.2721 30.5794L24.5334 55.3181L27.848 58.6327L52.5867 33.894L52.5867 52.9979Z"
				/>
			</svg>
		);
	} else if (type === "hover") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<circle cx="42" cy="42" r="42" />
			</svg>
		);
	} else if (type === "play") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 85 85"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M84.397 42.397C84.397 19.201 65.5929 0.39697 42.397 0.396973C19.201 0.396973 0.39697 19.201 0.396973 42.397C0.396973 65.5929 19.201 84.397 42.397 84.397C65.5929 84.397 84.397 65.5929 84.397 42.397ZM36 23V61.1818L55.0909 42.0909L36 23Z"
				/>
			</svg>
		);
	} else if (type === "pause") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M84 42C84 65.196 65.196 84 42 84C18.804 84 0 65.196 0 42C0 18.804 18.804 0 42 0C65.196 0 84 18.804 84 42ZM30 25H36V60H30V25ZM55 25H49V60H55V25Z"
				/>
			</svg>
		);
	} else if (type === "phone") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M42 84C65.1958 84 84 65.1958 84 42C84 18.8042 65.1958 0 42 0C18.8042 0 0 18.8042 0 42C0 65.1958 18.8042 84 42 84ZM56.5796 60.2617C55.3882 60.7539 53.9443 61 52.2476 61C50.3955 61 48.4331 60.6245 46.3608 59.873C44.3018 59.1221 42.1968 58.021 40.0469 56.5708C37.897 55.1328 35.7793 53.3779 33.6943 51.3062C32.5142 50.126 31.436 48.9355 30.4595 47.7354C29.71 46.814 29.0205 45.8867 28.3906 44.9531C26.9531 42.7905 25.8584 40.6729 25.1074 38.6006C24.3691 36.5283 24 34.5664 24 32.7144C24 31.0308 24.2461 29.5933 24.7383 28.4014C25.2305 27.21 26.0269 26.1221 27.1279 25.1377L27.3608 24.9434C27.4062 24.9043 27.4502 24.8652 27.4922 24.8262C27.5342 24.7876 27.5747 24.749 27.6133 24.7104C28.9214 23.5449 30.1909 22.9751 31.4214 23.001C32.1206 23.0137 32.7939 23.2275 33.4419 23.6421C34.0894 24.0435 34.7173 24.6782 35.3262 25.5459L39.2505 31.1992C39.8462 32.0669 40.1509 32.9863 40.1636 33.9575C40.1709 34.4922 40.0493 35.0049 39.7983 35.4951C39.5996 35.8838 39.3198 36.2583 38.959 36.6191L37.4824 38.1152C37.2622 38.335 37.1392 38.5488 37.1133 38.7563C37.0874 38.9502 37.1392 39.1577 37.269 39.3779C37.3994 39.5864 37.5459 39.8047 37.709 40.0332C37.8701 40.2583 38.0474 40.4932 38.2402 40.7378C38.4604 41.001 38.6909 41.27 38.9307 41.5449C39.1279 41.7705 39.3315 42 39.542 42.2334C40.021 42.7515 40.5132 43.2632 41.0186 43.7681C41.4976 44.2476 42.0288 44.7524 42.6113 45.2837C43.1943 45.8018 43.751 46.2808 44.2822 46.7212C44.8262 47.1616 45.2729 47.4917 45.6226 47.7119C45.8428 47.8545 46.0503 47.9126 46.2441 47.8867C46.4517 47.8608 46.6655 47.7378 46.8853 47.5176L48.3813 46.022C48.8643 45.5464 49.3726 45.2139 49.9058 45.0244C50.2729 44.894 50.6519 44.8315 51.043 44.8369C52.0142 44.8496 52.9341 45.1543 53.8018 45.75L59.4551 49.6743C60.3228 50.27 60.9639 50.8979 61.3784 51.5586C61.6704 52.0151 61.8599 52.4844 61.9458 52.9663C61.9819 53.1685 62 53.3726 62 53.5791C62 54.1875 61.8574 54.8159 61.5728 55.4634C61.3008 56.0981 60.873 56.7393 60.2905 57.3867L60.0571 57.6196C60.0249 57.665 59.9907 57.709 59.9551 57.751C59.9194 57.793 59.8823 57.8335 59.8438 57.8721C58.8594 58.9858 57.7715 59.7827 56.5796 60.2617ZM46.9634 56.9204C48.854 57.6846 50.6221 58.0469 52.2671 58.0083C53.3418 57.9951 54.3325 57.8013 55.2393 57.4253C55.7358 57.2197 56.1958 56.9556 56.6187 56.6333C56.9678 56.3672 57.2915 56.0615 57.5898 55.7158C57.6548 55.6509 57.7065 55.5928 57.7456 55.541L57.9009 55.3467C58.4189 54.751 58.6777 54.1616 58.6777 53.5791C58.6777 53.2939 58.6133 53.0283 58.4834 52.7822C58.3672 52.5361 58.1665 52.3159 57.8813 52.1221L52.228 48.353C51.917 48.1587 51.6001 48.0615 51.2759 48.0615C50.9521 48.0615 50.6416 48.2173 50.3438 48.5278L48.6338 50.2373C47.9604 50.9111 47.2417 51.2476 46.4775 51.2476C45.7134 51.2349 45.0073 50.9888 44.3599 50.5093C43.855 50.1338 43.2783 49.6743 42.6309 49.1299C41.9961 48.5732 41.355 48.0034 40.7075 47.4204C40.0728 46.8247 39.5098 46.2808 39.0176 45.7886C38.2661 45.0503 37.4634 44.1958 36.6084 43.2241C35.7534 42.2529 35.0479 41.3916 34.4907 40.6406C33.9985 39.9932 33.7524 39.2871 33.7524 38.5229C33.7524 37.7461 34.0894 37.0273 34.7627 36.3667L36.4722 34.6572C36.6636 34.4663 36.7935 34.2695 36.8623 34.0679C36.9004 33.9551 36.9194 33.8408 36.9194 33.7246C36.9258 33.5625 36.9043 33.4023 36.8555 33.2437C36.8071 33.085 36.7314 32.9277 36.6279 32.7725L32.8589 27.1191C32.522 26.5884 32.043 26.3228 31.4214 26.3228C31.1362 26.3228 30.8384 26.394 30.5278 26.5366C30.2295 26.666 29.9385 26.854 29.6533 27.1001L29.459 27.2554C29.4375 27.2715 29.415 27.29 29.3911 27.3105C29.3579 27.3398 29.3223 27.373 29.2842 27.4106C28.8555 27.7812 28.4878 28.1909 28.1816 28.6387C27.9419 28.9893 27.7397 29.3633 27.5747 29.7612C27.1992 30.6553 26.9985 31.6392 26.9722 32.7144C26.9463 34.3594 27.3286 36.1465 28.1187 38.0762C28.9087 39.9932 29.9834 41.9229 31.3438 43.8652C32.7163 45.7949 34.2446 47.6021 35.9282 49.2856C37.6123 50.9561 39.3994 52.4585 41.2905 53.7925C42.2915 54.4922 43.293 55.1138 44.2944 55.6572C45.1841 56.1401 46.0737 56.561 46.9634 56.9204Z"
				/>
			</svg>
		);
	} else if (type === "email") {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M42 84C65.1958 84 84 65.1958 84 42C84 18.8042 65.1958 0 42 0C18.8042 0 0 18.8042 0 42C0 65.1958 18.8042 84 42 84ZM56.855 57.2139H27.6885C25.7925 57.2139 24.3672 56.7427 23.4131 55.8008C22.4712 54.8706 22 53.4697 22 51.5977V31.5977C22 29.7378 22.4468 28.3428 23.3408 27.4131C24.2466 26.4712 25.5146 26 27.145 26H56.3115C58.2075 26 59.627 26.4712 60.5688 27.4131C61.5229 28.3428 62 29.7378 62 31.5977V51.5977C62 53.4697 61.5469 54.8706 60.6411 55.8008C59.7476 56.7427 58.4854 57.2139 56.855 57.2139ZM26.2524 54.2188C26.6279 54.3677 27.0703 54.4419 27.5796 54.4419H56.4204C56.9507 54.4419 57.4087 54.3594 57.7944 54.1934L46.9839 43.5L45.8042 44.6592C45.1641 45.2876 44.5361 45.7402 43.9204 46.0181C43.5342 46.1924 43.1431 46.312 42.7471 46.3765C42.5117 46.415 42.2749 46.4346 42.0361 46.4346C41.396 46.4346 40.7622 46.2959 40.1343 46.0181C39.7939 45.8647 39.4517 45.6577 39.1079 45.3975C38.8291 45.1865 38.5493 44.9404 38.2681 44.6592L37.0874 43.5005L26.2524 54.2188ZM24.7812 51.9082L35.1768 41.6245L24.7754 31.4141C24.7734 31.4741 24.772 31.5356 24.772 31.5977V51.5977C24.772 51.7041 24.7749 51.8076 24.7812 51.9082ZM26.1821 29.0308C26.5723 28.8584 27.0386 28.772 27.5796 28.772H56.4204C56.9824 28.772 57.4634 28.8677 57.8628 29.0586L44.228 42.522C43.8296 42.9082 43.4492 43.1919 43.0869 43.373C42.7368 43.5542 42.3862 43.645 42.0361 43.645C41.6738 43.645 41.3115 43.5542 40.9492 43.373C40.5991 43.1802 40.2305 42.896 39.8442 42.522L26.1821 29.0308ZM59.2261 31.4697L48.8853 41.6318L59.2231 51.8418C59.2266 51.7681 59.228 51.6924 59.228 51.6157V31.6157C59.228 31.5664 59.2275 31.5176 59.2261 31.4697Z"
				/>
			</svg>
		);
	} else {
		return (
			<svg
				style={{ transform: `translate(-50%, -50%)` }}
				viewBox="0 0 84 84"
				xmlns="http://www.w3.org/2000/svg"
			>
				<circle cx="42" cy="42" r="42" />
			</svg>
		);
	}
}
